


ARM Macro Assembler    Page 1 


    1 00000000         ;******************** (C) COPYRIGHT 2018 IoTality ******
                       **************
    2 00000000         ;* File Name          : LED.s
    3 00000000         ;* Author             : Gopal
    4 00000000         ;* Date               : 07-Feb-2018
    5 00000000         ;* Description        : A simple code to blink LEDs on S
                       TM32F4 discovery board
    6 00000000         ;*                      - The functions are called from 
                       startup code
    7 00000000         ;*                      - Initialization carried out for
                        GPIO-D pins PD12 to PD15 (connected to LEDs)
    8 00000000         ;*                      - Blink interval delay implement
                       ed in software
    9 00000000         ;*******************************************************
                       ************************
   10 00000000                 GET              reg_stm32f407xx.inc
    1 00000000         
    2 00000000         ; ******* Register definitions *******
    3 00000000         
    4 00000000         ;As per STM32F407 datasheet and reference manual
    5 00000000         
    6 00000000 40023830 
                       RCC_AHB1ENR
                               EQU              0x40023830  ;Clock control for 
                                                            AHB1 peripherals (i
                                                            ncludes GPIO)
    7 00000000         
    8 00000000         ;GPIO-D control registers
    9 00000000 40020C00 
                       GPIOD_MODER
                               EQU              0x40020C00  ;set GPIO pin mode 
                                                            as Input/Output/Ana
                                                            log
   10 00000000 40020C04 
                       GPIOD_OTYPER
                               EQU              0x40020C04  ;Set GPIO pin type 
                                                            as push-pull or ope
                                                            n drain
   11 00000000 40020C08 
                       GPIOD_OSPEEDR
                               EQU              0x40020C08  ;Set GPIO pin switc
                                                            hing speed
   12 00000000 40020C0C 
                       GPIOD_PUPDR
                               EQU              0x40020C0C  ;Set GPIO pin pull-
                                                            up/pull-down
   13 00000000 40020C14 
                       GPIOD_ODR
                               EQU              0x40020C14  ;GPIO pin output da
                                                            ta
   14 00000000         
   15 00000000 40020C18 
                       GPIOD_BSRR
                               EQU              0x40020C18
   16 00000000         
   17 00000000 E000E010 
                       SYSTICK_CONTROLR
                               EQU              0xE000E010
   18 00000000 E000E014 



ARM Macro Assembler    Page 2 


                       SYSTICK_RELOADR
                               EQU              0xE000E014
   19 00000000         
   20 00000000         
   21 00000000         ; **************************
   22 00000000         
   23 00000000         
   24 00000000                 END
   11 00000000         
   12 00000000                 AREA             ISRCODE, CODE, READONLY
   13 00000000         
   14 00000000         SysTick_Handler
                               PROC                         ; Aqui definimos lo
                                                             que se ejecuta en 
                                                            la excepcion
   15 00000000                 EXPORT           SysTick_Handler
   16 00000000         
   17 00000000         ; Codigo aqui
   18 00000000         
   19 00000000         ; Sumando 1s a los registros que llevan el tiempo, el de
                       l semaforo amarillo no 
   20 00000000         ; se toma en cuenta.
   21 00000000 F10A 0A01       ADD              R10, R10, #1 ; Contador de tiem
                                                            po de los carros
   22 00000004 F101 0101       ADD              R1, R1, #1  ; tiempo de espera 
                                                            del carril contrari
                                                            o
   23 00000008         
   24 00000008         ; Comparaciones y saltos
   25 00000008 2C01            CMP              R4, #1      ; Estado 1?
   26 0000000A D007            BEQ              E1
   27 0000000C 2C02            CMP              R4, #2      ; Estado 2?
   28 0000000E D031            BEQ              E2
   29 00000010 2C03            CMP              R4, #3      ; Estado 3?
   30 00000012 D02F            BEQ              E3
   31 00000014 2C04            CMP              R4, #4      ; Estado 4?
   32 00000016 D02D            BEQ              E4
   33 00000018         ; Default
   34 00000018 F000 8093       BEQ.W            Done
   35 0000001C         
   36 0000001C         E1                                   ; Estado 1
   37 0000001C         ; Seteando semaforos
   38 0000001C F04F 0502       MOV              R5, #2      ; Verde
   39 00000020 601D            STR              R5, [R3, #0] ; Semaforo 1 a ver
                                                            de
   40 00000022 609D            STR              R5, [R3, #8] ;  Semáforo 3 a ve
                                                            rde
   41 00000024 615D            STR              R5, [R3, #20] ; Peatonal 2 a ve
                                                            rde
   42 00000026 61DD            STR              R5, [R3, #28] ; Peatonal 4 a ve
                                                            rde
   43 00000028         
   44 00000028 F04F 0500       MOV              R5, #0      ; Rojo
   45 0000002C 605D            STR              R5, [R3, #4] 
                                                            ; Semaforo 2 a rojo
                                                            
   46 0000002E 60DD            STR              R5, [R3, #12] 
                                                            ; Semaforo 4 a rojo
                                                            



ARM Macro Assembler    Page 3 


   47 00000030 611D            STR              R5, [R3, #16] 
                                                            ; Peatonal 1 a rojo
                                                            
   48 00000032 619D            STR              R5, [R3, #24] 
                                                            ; Peatonal 3 a rojo
                                                            
   49 00000034         
   50 00000034         ; Revisando si se deja pasar un carro
   51 00000034 F1BA 0F0A       CMP              R10, #10    ; Los carros se dej
                                                            an pasar cada 10 se
                                                            gundos
   52 00000038 46F3            MOV              R11, LR     ; Para no perder el
                                                             link a la ejecucio
                                                            n original
   53 0000003A BFA8 F000 
              F81A             BLGE             Pasar_Carro ; Branch with link,
                                                             para volver a aqui
                                                            .
   54 00000040         
   55 00000040         ; Computando el movimiento al siguiente estado
   56 00000040         
   57 00000040         ; Cargando desde memoria
   58 00000040 6C1D            LDR              R5, [R3, #64] ; Primer carro ca
                                                            lle 2
   59 00000042 F8D3 6084       LDR              R6, [R3, #132] ; Primer carro c
                                                            alle 4
   60 00000046 6A1F            LDR              R7, [R3, #32] ;  Primer carro c
                                                            alle 1
   61 00000048 F8D3 8060       LDR              R8, [R3, #96] ; Primer carro ca
                                                            lle 3
   62 0000004C         
   63 0000004C 2A3C            CMP              R2, #60     ; El carril opuesto
                                                             ha esperado un min
                                                            uto?
   64 0000004E DB0A            BLT              E1_No_Minuto ; Si no, branch a 
                                                            no minuto 
   65 00000050         E1_Minuto                            ; Si el carril opue
                                                            sto ha esperado un 
                                                            minuto...
   66 00000050 EA45 0506       ORR              R5, R5, R6  ; Carro en 2 o carr
                                                            o en 4
   67 00000054 EA47 0708       ORR              R7, R7, R8  ; Carro en 1 o carr
                                                            o en 3
   68 00000058 2D01            CMP              R5, #1      ; Carro24
   69 0000005A BF18 2F00       CMPNE            R7, #0      ; OR ~Carro13
   70 0000005E D102            BNE              E1_No_Minuto
   71 00000060 F04F 0402       MOV              R4, #2      ; Pasa al estado 2 
                                                            si carro24 or ~carr
                                                            o13
   72 00000064 E06D            B                Done
   73 00000066         
   74 00000066         E1_No_Minuto                         ; Si el carril opue
                                                            sto no ha esperado 
                                                            un minuto...
   75 00000066 2D01            CMP              R5, #1      ; Carro24
   76 00000068 BF08 2F00       CMPEQ            R7, #0      ; AND ~Carro13
   77 0000006C D169            BNE              Done        ; Continua en el mi
                                                            smo estado si no se
                                                             cumple la igualdad



ARM Macro Assembler    Page 4 


                                                            
   78 0000006E F04F 0402       MOV              R4, #2      ; Pasa al estado 2 
                                                            si carro24 AND ~Car
                                                            ro13
   79 00000072         
   80 00000072 E066            B                Done        ; Finalmente branch
                                                             a done
   81 00000074         
   82 00000074         
   83 00000074         E2                                   ; Estado 2
   84 00000074         
   85 00000074         E3                                   ; Estado 3
   86 00000074         
   87 00000074         E4                                   ; Estado 4
   88 00000074         
   89 00000074         
   90 00000074         ; Funcion para mover un carro
   91 00000074         Pasar_Carro
   92 00000074 F04F 0A00       MOV              R10, #0     ; Resetea el contad
                                                            or de tiempo de car
                                                            ros
   93 00000078 2C03            CMP              R4, #3      ; Si es estado 3, p
                                                            asan los carros de 
                                                            C2 y C4
   94 0000007A D030            BEQ              Pasar_Carro_2
   95 0000007C         
   96 0000007C         Pasar_Carro_1
   97 0000007C 621D            STR              R5, [R3, #32] ; Limpia el prime
                                                            r campo de la fila 
                                                            de carros de la cal
                                                            le 1
   98 0000007E 661D            STR              R5, [R3, #96] ; Igual con la ca
                                                            lle 3
   99 00000080         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 1 de manera descendente
  100 00000080         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  101 00000080 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  102 00000084 F103 0720       ADD              R7, R3, #32 ; Base para calle 1
                                                            
  103 00000088 F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  104 0000008C F04F 0804       MOV              R8, #4      ; R8 = 4 (Para efec
                                                            tos de la multiplic
                                                            acion y acceso de m
                                                            emoria)
  105 00000090         Pasar_Carro_1_loopA
  106 00000090 FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  107 00000094 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  108 00000098         
  109 00000098 F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  110 0000009C 2E00            CMP              R6, #0      ;
  111 0000009E BFA8 2D01       CMPGE            R5, #1      ;
  112 000000A2 D1F5            BNE              Pasar_Carro_1_loopA



ARM Macro Assembler    Page 5 


  113 000000A4         ; Fin del ciclo
  114 000000A4 F04F 0600       MOV              R6, #0      ; Para guardar un 0
                                                            
  115 000000A8 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  116 000000AA F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  117 000000AE F04F 0500       MOV              R5, #0      ; Reseteando R5
  118 000000B2         
  119 000000B2         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 3 de manera descendente
  120 000000B2         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  121 000000B2 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  122 000000B6 F103 0760       ADD              R7, R3, #96 ; Base para calle 3
                                                            
  123 000000BA F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  124 000000BE         Pasar_Carro_1_loopB
  125 000000BE FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  126 000000C2 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  127 000000C6         
  128 000000C6 F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  129 000000CA 2E00            CMP              R6, #0      ;
  130 000000CC BFA8 2D01       CMPGE            R5, #1      ;
  131 000000D0 D1F5            BNE              Pasar_Carro_1_loopB
  132 000000D2         ; Fin del ciclo
  133 000000D2 F04F 0600       MOV              R6, #0      ; Reinicia R10, que
                                                             es la condicion de
                                                             salida 
  134 000000D6 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  135 000000D8 F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  136 000000DC         
  137 000000DC 4770            BX               LR          ;  ; Devuelvase a d
                                                            onde estabamos
  138 000000DE         
  139 000000DE         Pasar_Carro_2
  140 000000DE 641D            STR              R5, [R3, #64] ; Limpia el prime
                                                            r campo de la fila 
                                                            de carros de la cal
                                                            le 2
  141 000000E0 F8C3 5084       STR              R5, [R3, #132] ; Igual con la c
                                                            alle 4
  142 000000E4         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 2 de manera descendente
  143 000000E4         ; lo que se quiere lograr es mover el ultimo carro, de h



ARM Macro Assembler    Page 6 


                       aber, al inicio del array
  144 000000E4 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  145 000000E8 F103 0740       ADD              R7, R3, #64 ; Base para calle 2
                                                            
  146 000000EC F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  147 000000F0 F04F 0804       MOV              R8, #4      ; R8 = 4 (Para efec
                                                            tos de la multiplic
                                                            acion y acceso de m
                                                            emoria)
  148 000000F4         Pasar_Carro_2_loopA
  149 000000F4 FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  150 000000F8 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  151 000000FC         
  152 000000FC F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  153 00000100 2E00            CMP              R6, #0      ;
  154 00000102 BFA8 2D01       CMPGE            R5, #1      ;
  155 00000106 D1F5            BNE              Pasar_Carro_2_loopA
  156 00000108         ; Fin del ciclo
  157 00000108 F04F 0600       MOV              R6, #0      ; Para guardar un 0
                                                            
  158 0000010C 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  159 0000010E F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  160 00000112 F04F 0500       MOV              R5, #0      ; Reseteando R5
  161 00000116         
  162 00000116         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 4 de manera descendente
  163 00000116         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  164 00000116 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  165 0000011A F103 0784       ADD              R7, R3, #132 
                                                            ; Base para calle 4
                                                            
  166 0000011E F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  167 00000122         Pasar_Carro_2_loopB
  168 00000122 FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  169 00000126 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  170 0000012A         
  171 0000012A F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  172 0000012E 2E00            CMP              R6, #0      ;
  173 00000130 BFA8 2D01       CMPGE            R5, #1      ;
  174 00000134 D1F5            BNE              Pasar_Carro_2_loopB
  175 00000136         ; Fin del ciclo



ARM Macro Assembler    Page 7 


  176 00000136 F04F 0600       MOV              R6, #0      ; Reinicia R10, que
                                                             es la condicion de
                                                             salida 
  177 0000013A 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  178 0000013C F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  179 00000140         
  180 00000140 4770            BX               LR          ;  ; Devuelvase a d
                                                            onde estabamos
  181 00000142         
  182 00000142         
  183 00000142         
  184 00000142         
  185 00000142         Done                                 ; Branch de finaliz
                                                            acion
  186 00000142         
  187 00000142 4758            BX               R11         ; Necesario al ser 
                                                            una excepcion.
  188 00000144         
  189 00000144                 ENDP
  190 00000144         
  191 00000144                 ALIGN            4
  192 00000144 0000F000 
                       LEDs_ON EQU              0x0000F000
  193 00000144 F0000000 
                       LEDs_OFF
                               EQU              0xF0000000
  194 00000144         
  195 00000144         
  196 00000144                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\isr.d -o.\objects\isr.o -IC:\Users\kev_s\AppData\L
ocal\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Incl
ude -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__U
VISION_VERSION SETA 531" --predefine="STM32F407xx SETA 1" --list=.\listings\isr
.lst ..\src\isr.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Done 00000142

Symbol: Done
   Definitions
      At line 185 in file ..\src\isr.s
   Uses
      At line 34 in file ..\src\isr.s
      At line 72 in file ..\src\isr.s
      At line 77 in file ..\src\isr.s
      At line 80 in file ..\src\isr.s

E1 0000001C

Symbol: E1
   Definitions
      At line 36 in file ..\src\isr.s
   Uses
      At line 26 in file ..\src\isr.s
Comment: E1 used once
E1_Minuto 00000050

Symbol: E1_Minuto
   Definitions
      At line 65 in file ..\src\isr.s
   Uses
      None
Comment: E1_Minuto unused
E1_No_Minuto 00000066

Symbol: E1_No_Minuto
   Definitions
      At line 74 in file ..\src\isr.s
   Uses
      At line 64 in file ..\src\isr.s
      At line 70 in file ..\src\isr.s

E2 00000074

Symbol: E2
   Definitions
      At line 83 in file ..\src\isr.s
   Uses
      At line 28 in file ..\src\isr.s
Comment: E2 used once
E3 00000074

Symbol: E3
   Definitions
      At line 85 in file ..\src\isr.s
   Uses
      At line 30 in file ..\src\isr.s
Comment: E3 used once
E4 00000074

Symbol: E4
   Definitions
      At line 87 in file ..\src\isr.s
   Uses
      At line 32 in file ..\src\isr.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: E4 used once
ISRCODE 00000000

Symbol: ISRCODE
   Definitions
      At line 12 in file ..\src\isr.s
   Uses
      None
Comment: ISRCODE unused
Pasar_Carro 00000074

Symbol: Pasar_Carro
   Definitions
      At line 91 in file ..\src\isr.s
   Uses
      At line 53 in file ..\src\isr.s
Comment: Pasar_Carro used once
Pasar_Carro_1 0000007C

Symbol: Pasar_Carro_1
   Definitions
      At line 96 in file ..\src\isr.s
   Uses
      None
Comment: Pasar_Carro_1 unused
Pasar_Carro_1_loopA 00000090

Symbol: Pasar_Carro_1_loopA
   Definitions
      At line 105 in file ..\src\isr.s
   Uses
      At line 112 in file ..\src\isr.s
Comment: Pasar_Carro_1_loopA used once
Pasar_Carro_1_loopB 000000BE

Symbol: Pasar_Carro_1_loopB
   Definitions
      At line 124 in file ..\src\isr.s
   Uses
      At line 131 in file ..\src\isr.s
Comment: Pasar_Carro_1_loopB used once
Pasar_Carro_2 000000DE

Symbol: Pasar_Carro_2
   Definitions
      At line 139 in file ..\src\isr.s
   Uses
      At line 94 in file ..\src\isr.s
Comment: Pasar_Carro_2 used once
Pasar_Carro_2_loopA 000000F4

Symbol: Pasar_Carro_2_loopA
   Definitions
      At line 148 in file ..\src\isr.s
   Uses
      At line 155 in file ..\src\isr.s
Comment: Pasar_Carro_2_loopA used once
Pasar_Carro_2_loopB 00000122




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: Pasar_Carro_2_loopB
   Definitions
      At line 167 in file ..\src\isr.s
   Uses
      At line 174 in file ..\src\isr.s
Comment: Pasar_Carro_2_loopB used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 14 in file ..\src\isr.s
   Uses
      At line 15 in file ..\src\isr.s
Comment: SysTick_Handler used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOD_BSRR 40020C18

Symbol: GPIOD_BSRR
   Definitions
      At line 15 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_BSRR unused
GPIOD_MODER 40020C00

Symbol: GPIOD_MODER
   Definitions
      At line 9 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_MODER unused
GPIOD_ODR 40020C14

Symbol: GPIOD_ODR
   Definitions
      At line 13 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_ODR unused
GPIOD_OSPEEDR 40020C08

Symbol: GPIOD_OSPEEDR
   Definitions
      At line 11 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_OSPEEDR unused
GPIOD_OTYPER 40020C04

Symbol: GPIOD_OTYPER
   Definitions
      At line 10 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_OTYPER unused
GPIOD_PUPDR 40020C0C

Symbol: GPIOD_PUPDR
   Definitions
      At line 12 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_PUPDR unused
LEDs_OFF F0000000

Symbol: LEDs_OFF
   Definitions
      At line 193 in file ..\src\isr.s
   Uses
      None
Comment: LEDs_OFF unused
LEDs_ON 0000F000

Symbol: LEDs_ON



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 192 in file ..\src\isr.s
   Uses
      None
Comment: LEDs_ON unused
RCC_AHB1ENR 40023830

Symbol: RCC_AHB1ENR
   Definitions
      At line 6 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: RCC_AHB1ENR unused
SYSTICK_CONTROLR E000E010

Symbol: SYSTICK_CONTROLR
   Definitions
      At line 17 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: SYSTICK_CONTROLR unused
SYSTICK_RELOADR E000E014

Symbol: SYSTICK_RELOADR
   Definitions
      At line 18 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: SYSTICK_RELOADR unused
11 symbols
361 symbols in table
