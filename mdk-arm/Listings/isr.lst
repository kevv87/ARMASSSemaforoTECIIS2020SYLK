


ARM Macro Assembler    Page 1 


    1 00000000         ;******************** (C) COPYRIGHT 2018 IoTality ******
                       **************
    2 00000000         ;* File Name          : LED.s
    3 00000000         ;* Author             : Gopal
    4 00000000         ;* Date               : 07-Feb-2018
    5 00000000         ;* Description        : A simple code to blink LEDs on S
                       TM32F4 discovery board
    6 00000000         ;*                      - The functions are called from 
                       startup code
    7 00000000         ;*                      - Initialization carried out for
                        GPIO-D pins PD12 to PD15 (connected to LEDs)
    8 00000000         ;*                      - Blink interval delay implement
                       ed in software
    9 00000000         ;*******************************************************
                       ************************
   10 00000000                 GET              reg_stm32f407xx.inc
    1 00000000         
    2 00000000         ; ******* Register definitions *******
    3 00000000         
    4 00000000         ;As per STM32F407 datasheet and reference manual
    5 00000000         
    6 00000000 40023830 
                       RCC_AHB1ENR
                               EQU              0x40023830  ;Clock control for 
                                                            AHB1 peripherals (i
                                                            ncludes GPIO)
    7 00000000         
    8 00000000         ;GPIO-D control registers
    9 00000000 40020C00 
                       GPIOD_MODER
                               EQU              0x40020C00  ;set GPIO pin mode 
                                                            as Input/Output/Ana
                                                            log
   10 00000000 40020C04 
                       GPIOD_OTYPER
                               EQU              0x40020C04  ;Set GPIO pin type 
                                                            as push-pull or ope
                                                            n drain
   11 00000000 40020C08 
                       GPIOD_OSPEEDR
                               EQU              0x40020C08  ;Set GPIO pin switc
                                                            hing speed
   12 00000000 40020C0C 
                       GPIOD_PUPDR
                               EQU              0x40020C0C  ;Set GPIO pin pull-
                                                            up/pull-down
   13 00000000 40020C14 
                       GPIOD_ODR
                               EQU              0x40020C14  ;GPIO pin output da
                                                            ta
   14 00000000         
   15 00000000 40020C18 
                       GPIOD_BSRR
                               EQU              0x40020C18
   16 00000000         
   17 00000000 E000E010 
                       SYSTICK_CONTROLR
                               EQU              0xE000E010
   18 00000000 E000E014 



ARM Macro Assembler    Page 2 


                       SYSTICK_RELOADR
                               EQU              0xE000E014
   19 00000000         
   20 00000000         
   21 00000000         ; **************************
   22 00000000         
   23 00000000         
   24 00000000                 END
   11 00000000         
   12 00000000                 AREA             ISRCODE, CODE, READONLY
   13 00000000         
   14 00000000         SysTick_Handler
                               PROC                         ; Aqui definimos lo
                                                             que se ejecuta en 
                                                            la excepcion
   15 00000000                 EXPORT           SysTick_Handler
   16 00000000         
   17 00000000         ; Codigo aqui
   18 00000000         
   19 00000000         ; Sumando 1s a los registros que llevan el tiempo, el de
                       l semaforo amarillo no 
   20 00000000         ; se toma en cuenta.
   21 00000000 F10A 0A01       ADD              R10, R10, #1 ; Contador de tiem
                                                            po de los carros
   22 00000004 F8D3 00A4       LDR              R0, [R3, #164] ; Contador de ti
                                                            empo de espera
   23 00000008 F100 0001       ADD              R0, R0, #1
   24 0000000C F8C3 00A4       STR              R0, [R3, #164]
   25 00000010         
   26 00000010 46F3            MOV              R11, LR     ; Para no perder el
                                                             link a la ejecucio
                                                            n original
   27 00000012         
   28 00000012         ; Comparaciones y saltos
   29 00000012 2C01            CMP              R4, #1      ; Estado 1?
   30 00000014 D008            BEQ              E1
   31 00000016 2C02            CMP              R4, #2      ; Estado 2?
   32 00000018 D03A            BEQ              E2
   33 0000001A 2C03            CMP              R4, #3      ; Estado 3?
   34 0000001C D04F            BEQ              E3
   35 0000001E 2C04            CMP              R4, #4      ; Estado 4?
   36 00000020 F000 8081       BEQ.W            E4
   37 00000024         ; Default
   38 00000024 F000 80FE       BEQ.W            Done
   39 00000028         
   40 00000028         E1                                   ; Estado 1
   41 00000028         ; Seteando semaforos
   42 00000028 F04F 0502       MOV              R5, #2      ; Verde
   43 0000002C 601D            STR              R5, [R3, #0] ; Semaforo 1 a ver
                                                            de
   44 0000002E 609D            STR              R5, [R3, #8] ;  Semáforo 3 a ve
                                                            rde
   45 00000030 615D            STR              R5, [R3, #20] ; Peatonal 2 a ve
                                                            rde
   46 00000032 61DD            STR              R5, [R3, #28] ; Peatonal 4 a ve
                                                            rde
   47 00000034         
   48 00000034 F04F 0500       MOV              R5, #0      ; Rojo
   49 00000038 605D            STR              R5, [R3, #4] 



ARM Macro Assembler    Page 3 


                                                            ; Semaforo 2 a rojo
                                                            
   50 0000003A 60DD            STR              R5, [R3, #12] 
                                                            ; Semaforo 4 a rojo
                                                            
   51 0000003C 611D            STR              R5, [R3, #16] 
                                                            ; Peatonal 1 a rojo
                                                            
   52 0000003E 619D            STR              R5, [R3, #24] 
                                                            ; Peatonal 3 a rojo
                                                            
   53 00000040         
   54 00000040         ; Revisando si se deja pasar un carro
   55 00000040 F1BA 0F0A       CMP              R10, #10    ; Los carros se dej
                                                            an pasar cada 10 se
                                                            gundos
   56 00000044 BFA8 F000 
              F884             BLGE             Pasar_Carro ; Branch with link,
                                                             para volver a aqui
                                                            .
   57 0000004A         
   58 0000004A         ; Computando el movimiento al siguiente estado
   59 0000004A         
   60 0000004A         ; Cargando desde memoria
   61 0000004A 6C1D            LDR              R5, [R3, #64] ; Primer carro ca
                                                            lle 2
   62 0000004C F8D3 6084       LDR              R6, [R3, #132] ; Primer carro c
                                                            alle 4
   63 00000050 6A1F            LDR              R7, [R3, #32] ;  Primer carro c
                                                            alle 1
   64 00000052 F8D3 8060       LDR              R8, [R3, #96] ; Primer carro ca
                                                            lle 3
   65 00000056 EA45 0506       ORR              R5, R5, R6  ; Carro en 2 o carr
                                                            o en 4
   66 0000005A EA47 0708       ORR              R7, R7, R8  ; Carro en 1 o carr
                                                            o en 3
   67 0000005E         
   68 0000005E 2838            CMP              R0, #56     ; El carril opuesto
                                                             ha esperado un min
                                                            uto?
   69 00000060 DB0A            BLT              E1_No_Minuto ; Si no, branch a 
                                                            no minuto 
   70 00000062         E1_Minuto                            ; Si el carril opue
                                                            sto ha esperado un 
                                                            minuto...
   71 00000062 2D01            CMP              R5, #1      ; Carro24
   72 00000064 BF18 2F00       CMPNE            R7, #0      ; OR ~Carro13
   73 00000068 D106            BNE              E1_No_Minuto
   74 0000006A F04F 0402       MOV              R4, #2      ; Pasa al estado 2 
                                                            si carro24 or ~carr
                                                            o13
   75 0000006E         ; Reiniciando contadores
   76 0000006E F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
   77 00000072 F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
   78 00000076 E0D5            B                Done



ARM Macro Assembler    Page 4 


   79 00000078         
   80 00000078         E1_No_Minuto                         ; Si el carril opue
                                                            sto no ha esperado 
                                                            un minuto...
   81 00000078 2D01            CMP              R5, #1      ; Carro24
   82 0000007A BF08 2F00       CMPEQ            R7, #0      ; AND ~Carro13
   83 0000007E F040 80D1       BNE.W            Done        ; Continua en el mi
                                                            smo estado si no se
                                                             cumple la igualdad
                                                            
   84 00000082 F04F 0402       MOV              R4, #2      ; Pasa al estado 2 
                                                            si carro24 AND ~Car
                                                            ro13
   85 00000086         ; Reiniciando contadores
   86 00000086 F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
   87 0000008A F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
   88 0000008E         
   89 0000008E E0C9            B                Done        ; Finalmente branch
                                                             a done
   90 00000090         
   91 00000090         
   92 00000090         E2                                   ; Estado 2
   93 00000090         ; Seteando semaforos
   94 00000090 F04F 0501       MOV              R5, #1      ; Amarillo
   95 00000094 601D            STR              R5, [R3, #0] ; Semaforo 1 a ama
                                                            rillo
   96 00000096 609D            STR              R5, [R3, #8] ;  Semáforo 3 a am
                                                            arillo
   97 00000098         
   98 00000098 F04F 0500       MOV              R5, #0      ; Rojo
   99 0000009C 605D            STR              R5, [R3, #4] 
                                                            ; Semaforo 2 a rojo
                                                            
  100 0000009E 60DD            STR              R5, [R3, #12] 
                                                            ; Semaforo 4 a rojo
                                                            
  101 000000A0 611D            STR              R5, [R3, #16] 
                                                            ; Peatonal 1 a rojo
                                                            
  102 000000A2 619D            STR              R5, [R3, #24] 
                                                            ; Peatonal 3 a rojo
                                                            
  103 000000A4 615D            STR              R5, [R3, #20] ; Peatonal 2 a ve
                                                            rde
  104 000000A6 61DD            STR              R5, [R3, #28] ; Peatonal 4 a ve
                                                            rde
  105 000000A8         
  106 000000A8         ; No se dejan pasar carros, R10 se toma como contador de
                        semaforo amarillo
  107 000000A8 F1BA 0F03       CMP              R10, #3     ; Se salta de estad
                                                            o cuando pasan 3 se
                                                            gundos en amarillo
  108 000000AC F040 80BA       BNE.W            Done
  109 000000B0 F04F 0403       MOV              R4, #3      ; Pasa a estado 3
  110 000000B4         ; Reiniciando contadores



ARM Macro Assembler    Page 5 


  111 000000B4 F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
  112 000000B8 F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
  113 000000BC E0B2            B                Done        ; Termina el caso, 
                                                            salta a done
  114 000000BE         
  115 000000BE         E3                                   ; Estado 3
  116 000000BE         ; Seteando semaforos
  117 000000BE F04F 0502       MOV              R5, #2      ; Verde
  118 000000C2 605D            STR              R5, [R3, #4] ; Semaforo 2 a ver
                                                            de
  119 000000C4 60DD            STR              R5, [R3, #12] ;  Semáforo 4 a v
                                                            erde
  120 000000C6 611D            STR              R5, [R3, #16] ; Peatonal 1 a ve
                                                            rde
  121 000000C8 619D            STR              R5, [R3, #24] ; Peatonal 3 a ve
                                                            rde
  122 000000CA         
  123 000000CA F04F 0500       MOV              R5, #0      ; Rojo
  124 000000CE 601D            STR              R5, [R3, #0] 
                                                            ; Semaforo 1 a rojo
                                                            
  125 000000D0 609D            STR              R5, [R3, #8] 
                                                            ; Semaforo 3 a rojo
                                                            
  126 000000D2 615D            STR              R5, [R3, #20] 
                                                            ; Peatonal 2 a rojo
                                                            
  127 000000D4 61DD            STR              R5, [R3, #28] 
                                                            ; Peatonal 4 a rojo
                                                            
  128 000000D6         
  129 000000D6         ; Revisando si se deja pasar un carro
  130 000000D6 F1BA 0F0A       CMP              R10, #10    ; Los carros se dej
                                                            an pasar cada 10 se
                                                            gundos
  131 000000DA BFA8 F000 
              F839             BLGE             Pasar_Carro ; Branch with link,
                                                             para volver a aqui
                                                            .
  132 000000E0         
  133 000000E0         ; Computando el movimiento al siguiente estado
  134 000000E0         
  135 000000E0         ; Cargando desde memoria
  136 000000E0 6C1D            LDR              R5, [R3, #64] ; Primer carro ca
                                                            lle 2
  137 000000E2 F8D3 6084       LDR              R6, [R3, #132] ; Primer carro c
                                                            alle 4
  138 000000E6 6A1F            LDR              R7, [R3, #32] ;  Primer carro c
                                                            alle 1
  139 000000E8 F8D3 8060       LDR              R8, [R3, #96] ; Primer carro ca
                                                            lle 3
  140 000000EC EA45 0506       ORR              R5, R5, R6  ; Carro en 2 o carr
                                                            o en 4
  141 000000F0 EA47 0708       ORR              R7, R7, R8  ; Carro en 1 o carr
                                                            o en 3



ARM Macro Assembler    Page 6 


  142 000000F4         
  143 000000F4 2838            CMP              R0, #56     ; El carril opuesto
                                                             ha esperado un min
                                                            uto?
  144 000000F6 DB0A            BLT              E3_No_Minuto ; Si no, branch a 
                                                            no minuto 
  145 000000F8         E3_Minuto                            ; Si el carril opue
                                                            sto ha esperado un 
                                                            minuto...
  146 000000F8 2F01            CMP              R7, #1      ; Carro13
  147 000000FA BF18 2D00       CMPNE            R5, #0      ; OR ~Carro24
  148 000000FE D106            BNE              E3_No_Minuto
  149 00000100 F04F 0404       MOV              R4, #4      ; Pasa al estado 4 
                                                            si ~carro24 or carr
                                                            o13
  150 00000104         ; Reiniciando contadores
  151 00000104 F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
  152 00000108 F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
  153 0000010C E08A            B                Done
  154 0000010E         
  155 0000010E         E3_No_Minuto                         ; Si el carril opue
                                                            sto no ha esperado 
                                                            un minuto...
  156 0000010E 2F01            CMP              R7, #1      ; Carro13
  157 00000110 BF08 2D00       CMPEQ            R5, #0      ; AND ~Carro24
  158 00000114         
  159 00000114 F040 8086       BNE.W            Done        ; Continua en el mi
                                                            smo estado si no se
                                                             cumple la igualdad
                                                            
  160 00000118 F04F 0404       MOV              R4, #4      ; Pasa al estado 4 
                                                            si ~carro24 AND car
                                                            ro13
  161 0000011C         ; Reiniciando contadores
  162 0000011C F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
  163 00000120 F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
  164 00000124         
  165 00000124 E07E            B                Done        ; Finalmente branch
                                                             a done
  166 00000126         
  167 00000126         E4                                   ; Estado 4
  168 00000126         ; Seteando semaforos
  169 00000126 F04F 0501       MOV              R5, #1      ; Amarillo
  170 0000012A 605D            STR              R5, [R3, #4] ; Semaforo 2 a ama
                                                            rillo
  171 0000012C 60DD            STR              R5, [R3, #12] ;  Semáforo 4 a a
                                                            marillo
  172 0000012E         
  173 0000012E F04F 0500       MOV              R5, #0      ; Rojo
  174 00000132 601D            STR              R5, [R3, #0] 
                                                            ; Semaforo 1 a rojo



ARM Macro Assembler    Page 7 


                                                            
  175 00000134 609D            STR              R5, [R3, #8] 
                                                            ; Semaforo 3 a rojo
                                                            
  176 00000136 611D            STR              R5, [R3, #16] 
                                                            ; Peatonal 1 a rojo
                                                            
  177 00000138 619D            STR              R5, [R3, #24] 
                                                            ; Peatonal 3 a rojo
                                                            
  178 0000013A 615D            STR              R5, [R3, #20] ; Peatonal 2 a ve
                                                            rde
  179 0000013C 61DD            STR              R5, [R3, #28] ; Peatonal 4 a ve
                                                            rde
  180 0000013E         
  181 0000013E         ; No se dejan pasar carros, R10 se toma como contador de
                        semaforo amarillo
  182 0000013E F1BA 0F03       CMP              R10, #3     ; Se salta de estad
                                                            o cuando pasan 3 se
                                                            gundos en amarillo
  183 00000142 D16F            BNE              Done
  184 00000144 F04F 0401       MOV              R4, #1      ; Pasa a estado 1
  185 00000148         ; Reiniciando contadores
  186 00000148 F04F 0A00       MOV              R10, #0     ; Reinicia contador
                                                             de tiempo de carro
                                                            s
  187 0000014C F8C3 A0A4       STR              R10, [R3, #164] ; Reinicia cont
                                                            ador de tiempo de e
                                                            spera
  188 00000150         
  189 00000150 E068            B                Done        ; Termina el caso, 
                                                            salta a done
  190 00000152         
  191 00000152         ; Funcion para mover un carro
  192 00000152         Pasar_Carro
  193 00000152 F04F 0A00       MOV              R10, #0     ; Resetea el contad
                                                            or de tiempo de car
                                                            ros
  194 00000156 2C03            CMP              R4, #3      ; Si es estado 3, p
                                                            asan los carros de 
                                                            C2 y C4
  195 00000158 D030            BEQ              Pasar_Carro_2
  196 0000015A         
  197 0000015A         Pasar_Carro_1
  198 0000015A 621D            STR              R5, [R3, #32] ; Limpia el prime
                                                            r campo de la fila 
                                                            de carros de la cal
                                                            le 1
  199 0000015C 661D            STR              R5, [R3, #96] ; Igual con la ca
                                                            lle 3
  200 0000015E         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 1 de manera descendente
  201 0000015E         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  202 0000015E F04F 0700       MOV              R7, #0      ; Reiniciando R7
  203 00000162 F103 0720       ADD              R7, R3, #32 ; Base para calle 1
                                                            
  204 00000166 F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra



ARM Macro Assembler    Page 8 


                                                            s)
  205 0000016A F04F 0804       MOV              R8, #4      ; R8 = 4 (Para efec
                                                            tos de la multiplic
                                                            acion y acceso de m
                                                            emoria)
  206 0000016E         Pasar_Carro_1_loopA
  207 0000016E FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  208 00000172 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  209 00000176         
  210 00000176 F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  211 0000017A 2E00            CMP              R6, #0      ;
  212 0000017C BFC8 2D01       CMPGT            R5, #1      ;
  213 00000180 D1F5            BNE              Pasar_Carro_1_loopA
  214 00000182         ; Fin del ciclo
  215 00000182 F04F 0600       MOV              R6, #0      ; Para guardar un 0
                                                            
  216 00000186 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  217 00000188 F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  218 0000018C F04F 0500       MOV              R5, #0      ; Reseteando R5
  219 00000190         
  220 00000190         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 3 de manera descendente
  221 00000190         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  222 00000190 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  223 00000194 F103 0760       ADD              R7, R3, #96 ; Base para calle 3
                                                            
  224 00000198 F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  225 0000019C         Pasar_Carro_1_loopB
  226 0000019C FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  227 000001A0 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  228 000001A4         
  229 000001A4 F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  230 000001A8 2E00            CMP              R6, #0      ;
  231 000001AA BFC8 2D01       CMPGT            R5, #1      ;
  232 000001AE D1F5            BNE              Pasar_Carro_1_loopB
  233 000001B0         ; Fin del ciclo
  234 000001B0 F04F 0600       MOV              R6, #0      ; Reinicia R10, que
                                                             es la condicion de
                                                             salida 
  235 000001B4 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            



ARM Macro Assembler    Page 9 


  236 000001B6 F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  237 000001BA         
  238 000001BA 4770            BX               LR          ;  ; Devuelvase a d
                                                            onde estabamos
  239 000001BC         
  240 000001BC         Pasar_Carro_2
  241 000001BC 641D            STR              R5, [R3, #64] ; Limpia el prime
                                                            r campo de la fila 
                                                            de carros de la cal
                                                            le 2
  242 000001BE F8C3 5084       STR              R5, [R3, #132] ; Igual con la c
                                                            alle 4
  243 000001C2         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 2 de manera descendente
  244 000001C2         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  245 000001C2 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  246 000001C6 F103 0740       ADD              R7, R3, #64 ; Base para calle 2
                                                            
  247 000001CA F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  248 000001CE F04F 0804       MOV              R8, #4      ; R8 = 4 (Para efec
                                                            tos de la multiplic
                                                            acion y acceso de m
                                                            emoria)
  249 000001D2         Pasar_Carro_2_loopA
  250 000001D2 FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  251 000001D6 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  252 000001DA         
  253 000001DA F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  254 000001DE 2E00            CMP              R6, #0      ;
  255 000001E0 BFC8 2D01       CMPGT            R5, #1      ;
  256 000001E4 D1F5            BNE              Pasar_Carro_2_loopA
  257 000001E6         ; Fin del ciclo
  258 000001E6 F04F 0600       MOV              R6, #0      ; Para guardar un 0
                                                            
  259 000001EA 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  260 000001EC F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  261 000001F0 F04F 0500       MOV              R5, #0      ; Reseteando R5
  262 000001F4         
  263 000001F4         ; Aqui vamos a hacer un for loop, para iterar la lista d
                       e carros de la calle 4 de manera descendente
  264 000001F4         ; lo que se quiere lograr es mover el ultimo carro, de h
                       aber, al inicio del array
  265 000001F4 F04F 0700       MOV              R7, #0      ; Reiniciando R7
  266 000001F8 F103 0784       ADD              R7, R3, #132 
                                                            ; Base para calle 4



ARM Macro Assembler    Page 10 


                                                            
  267 000001FC F04F 0607       MOV              R6, #7      ; i = 7 (vamos a ha
                                                            cer una cuenta atra
                                                            s)
  268 00000200 F04F 0804       MOV              R8, #4      ; R8 = 4 (Para efec
                                                            tos de la multiplic
                                                            acion y acceso de m
                                                            emoria)
  269 00000204         Pasar_Carro_2_loopB
  270 00000204 FB08 F906       MUL              R9, R8, R6  ; R9 = R8 x R6, par
                                                            a poner bien la dir
                                                            eccion de memoria
  271 00000208 F857 5009       LDR              R5, [R7, R9] ; R5 = carros[i], 
                                                            a R5 se le asigna e
                                                            l valor en R7+R9
  272 0000020C         
  273 0000020C F1A6 0601       SUB              R6, R6, #1  ; i -= 1
  274 00000210 2E00            CMP              R6, #0      ;
  275 00000212 BFC8 2D01       CMPGT            R5, #1      ;
  276 00000216 D1F5            BNE              Pasar_Carro_2_loopB
  277 00000218         ; Fin del ciclo
  278 00000218 F04F 0600       MOV              R6, #0      ; Reinicia R10, que
                                                             es la condicion de
                                                             salida 
  279 0000021C 603D            STR              R5, [R7, #0] ; Guarde R5 en la 
                                                            primera posicion de
                                                             la linea de carros
                                                            
  280 0000021E F847 6009       STR              R6, [R7, R9] ; Guarde 0 en la d
                                                            ireccion donde se e
                                                            ncontro el 1
  281 00000222         
  282 00000222 4770            BX               LR          ;  ; Devuelvase a d
                                                            onde estabamos
  283 00000224         
  284 00000224         
  285 00000224         
  286 00000224         
  287 00000224         Done                                 ; Branch de finaliz
                                                            acion
  288 00000224         
  289 00000224 4758            BX               R11         ; Necesario al ser 
                                                            una excepcion.
  290 00000226         
  291 00000226                 ENDP
  292 00000226         
  293 00000226 00 00           ALIGN            4
  294 00000228 0000F000 
                       LEDs_ON EQU              0x0000F000
  295 00000228 F0000000 
                       LEDs_OFF
                               EQU              0xF0000000
  296 00000228         
  297 00000228         
  298 00000228                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\isr.d -o.\objects\isr.o -IC:\Users\kev_s\AppData\L
ocal\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Incl
ude -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__U



ARM Macro Assembler    Page 11 


VISION_VERSION SETA 531" --predefine="STM32F407xx SETA 1" --list=.\listings\isr
.lst ..\src\isr.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Done 00000224

Symbol: Done
   Definitions
      At line 287 in file ..\src\isr.s
   Uses
      At line 38 in file ..\src\isr.s
      At line 78 in file ..\src\isr.s
      At line 83 in file ..\src\isr.s
      At line 89 in file ..\src\isr.s
      At line 108 in file ..\src\isr.s
      At line 113 in file ..\src\isr.s
      At line 153 in file ..\src\isr.s
      At line 159 in file ..\src\isr.s
      At line 165 in file ..\src\isr.s
      At line 183 in file ..\src\isr.s
      At line 189 in file ..\src\isr.s

E1 00000028

Symbol: E1
   Definitions
      At line 40 in file ..\src\isr.s
   Uses
      At line 30 in file ..\src\isr.s
Comment: E1 used once
E1_Minuto 00000062

Symbol: E1_Minuto
   Definitions
      At line 70 in file ..\src\isr.s
   Uses
      None
Comment: E1_Minuto unused
E1_No_Minuto 00000078

Symbol: E1_No_Minuto
   Definitions
      At line 80 in file ..\src\isr.s
   Uses
      At line 69 in file ..\src\isr.s
      At line 73 in file ..\src\isr.s

E2 00000090

Symbol: E2
   Definitions
      At line 92 in file ..\src\isr.s
   Uses
      At line 32 in file ..\src\isr.s
Comment: E2 used once
E3 000000BE

Symbol: E3
   Definitions
      At line 115 in file ..\src\isr.s
   Uses
      At line 34 in file ..\src\isr.s
Comment: E3 used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

E3_Minuto 000000F8

Symbol: E3_Minuto
   Definitions
      At line 145 in file ..\src\isr.s
   Uses
      None
Comment: E3_Minuto unused
E3_No_Minuto 0000010E

Symbol: E3_No_Minuto
   Definitions
      At line 155 in file ..\src\isr.s
   Uses
      At line 144 in file ..\src\isr.s
      At line 148 in file ..\src\isr.s

E4 00000126

Symbol: E4
   Definitions
      At line 167 in file ..\src\isr.s
   Uses
      At line 36 in file ..\src\isr.s
Comment: E4 used once
ISRCODE 00000000

Symbol: ISRCODE
   Definitions
      At line 12 in file ..\src\isr.s
   Uses
      None
Comment: ISRCODE unused
Pasar_Carro 00000152

Symbol: Pasar_Carro
   Definitions
      At line 192 in file ..\src\isr.s
   Uses
      At line 56 in file ..\src\isr.s
      At line 131 in file ..\src\isr.s

Pasar_Carro_1 0000015A

Symbol: Pasar_Carro_1
   Definitions
      At line 197 in file ..\src\isr.s
   Uses
      None
Comment: Pasar_Carro_1 unused
Pasar_Carro_1_loopA 0000016E

Symbol: Pasar_Carro_1_loopA
   Definitions
      At line 206 in file ..\src\isr.s
   Uses
      At line 213 in file ..\src\isr.s
Comment: Pasar_Carro_1_loopA used once
Pasar_Carro_1_loopB 0000019C



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: Pasar_Carro_1_loopB
   Definitions
      At line 225 in file ..\src\isr.s
   Uses
      At line 232 in file ..\src\isr.s
Comment: Pasar_Carro_1_loopB used once
Pasar_Carro_2 000001BC

Symbol: Pasar_Carro_2
   Definitions
      At line 240 in file ..\src\isr.s
   Uses
      At line 195 in file ..\src\isr.s
Comment: Pasar_Carro_2 used once
Pasar_Carro_2_loopA 000001D2

Symbol: Pasar_Carro_2_loopA
   Definitions
      At line 249 in file ..\src\isr.s
   Uses
      At line 256 in file ..\src\isr.s
Comment: Pasar_Carro_2_loopA used once
Pasar_Carro_2_loopB 00000204

Symbol: Pasar_Carro_2_loopB
   Definitions
      At line 269 in file ..\src\isr.s
   Uses
      At line 276 in file ..\src\isr.s
Comment: Pasar_Carro_2_loopB used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 14 in file ..\src\isr.s
   Uses
      At line 15 in file ..\src\isr.s
Comment: SysTick_Handler used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOD_BSRR 40020C18

Symbol: GPIOD_BSRR
   Definitions
      At line 15 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_BSRR unused
GPIOD_MODER 40020C00

Symbol: GPIOD_MODER
   Definitions
      At line 9 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_MODER unused
GPIOD_ODR 40020C14

Symbol: GPIOD_ODR
   Definitions
      At line 13 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_ODR unused
GPIOD_OSPEEDR 40020C08

Symbol: GPIOD_OSPEEDR
   Definitions
      At line 11 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_OSPEEDR unused
GPIOD_OTYPER 40020C04

Symbol: GPIOD_OTYPER
   Definitions
      At line 10 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_OTYPER unused
GPIOD_PUPDR 40020C0C

Symbol: GPIOD_PUPDR
   Definitions
      At line 12 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: GPIOD_PUPDR unused
LEDs_OFF F0000000

Symbol: LEDs_OFF
   Definitions
      At line 295 in file ..\src\isr.s
   Uses
      None
Comment: LEDs_OFF unused
LEDs_ON 0000F000

Symbol: LEDs_ON



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 294 in file ..\src\isr.s
   Uses
      None
Comment: LEDs_ON unused
RCC_AHB1ENR 40023830

Symbol: RCC_AHB1ENR
   Definitions
      At line 6 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: RCC_AHB1ENR unused
SYSTICK_CONTROLR E000E010

Symbol: SYSTICK_CONTROLR
   Definitions
      At line 17 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: SYSTICK_CONTROLR unused
SYSTICK_RELOADR E000E014

Symbol: SYSTICK_RELOADR
   Definitions
      At line 18 in file ..\src\reg_stm32f407xx.inc
   Uses
      None
Comment: SYSTICK_RELOADR unused
11 symbols
363 symbols in table
